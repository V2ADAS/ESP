
stm32_transmitA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001414  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080015a8  080015a8  000115a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c8  080015c8  000115d0  2**0
                  CONTENTS
  4 .ARM          00000000  080015c8  080015c8  000115d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015c8  080015d0  000115d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c8  080015c8  000115c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015cc  080015cc  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000115d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000000  080015d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080015d0  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000115d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076b1  00000000  00000000  00011600  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013cc  00000000  00000000  00018cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003d0  00000000  00000000  0001a080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000338  00000000  00000000  0001a450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ff6  00000000  00000000  0001a788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003a4f  00000000  00000000  0001b77e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000094bf  00000000  00000000  0001f1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002868c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d64  00000000  00000000  00028708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001590 	.word	0x08001590

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001590 	.word	0x08001590

080001d4 <EXTI0_IRQHandler>:
		GLOBAL_EXTIPtr[Copy_u8InterruptNo]=ptr;
	}
}


void EXTI0_IRQHandler(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[0]();
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <EXTI0_IRQHandler+0x1c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4798      	blx	r3
	EXTI->PR |= 1;
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a04      	ldr	r2, [pc, #16]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6153      	str	r3, [r2, #20]
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	40013c00 	.word	0x40013c00

080001f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[1]();
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <EXTI1_IRQHandler+0x1c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4798      	blx	r3
	EXTI->PR |= 1<<1;
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000208:	f043 0302 	orr.w	r3, r3, #2
 800020c:	6153      	str	r3, [r2, #20]
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000001c 	.word	0x2000001c
 8000218:	40013c00 	.word	0x40013c00

0800021c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[2]();
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <EXTI2_IRQHandler+0x1c>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4798      	blx	r3
	EXTI->PR |= 1<<2;
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <EXTI2_IRQHandler+0x20>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a04      	ldr	r2, [pc, #16]	; (800023c <EXTI2_IRQHandler+0x20>)
 800022c:	f043 0304 	orr.w	r3, r3, #4
 8000230:	6153      	str	r3, [r2, #20]
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	2000001c 	.word	0x2000001c
 800023c:	40013c00 	.word	0x40013c00

08000240 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[3]();
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <EXTI3_IRQHandler+0x1c>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4798      	blx	r3
	EXTI->PR |= 1<<3;
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <EXTI3_IRQHandler+0x20>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <EXTI3_IRQHandler+0x20>)
 8000250:	f043 0308 	orr.w	r3, r3, #8
 8000254:	6153      	str	r3, [r2, #20]
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000001c 	.word	0x2000001c
 8000260:	40013c00 	.word	0x40013c00

08000264 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[4]();
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI4_IRQHandler+0x1c>)
 800026a:	691b      	ldr	r3, [r3, #16]
 800026c:	4798      	blx	r3
	EXTI->PR |= 1<<4;
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <EXTI4_IRQHandler+0x20>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a04      	ldr	r2, [pc, #16]	; (8000284 <EXTI4_IRQHandler+0x20>)
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6153      	str	r3, [r2, #20]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000001c 	.word	0x2000001c
 8000284:	40013c00 	.word	0x40013c00

08000288 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	if((GET_BIT(EXTI->PR,EXTI5)==1)&(GLOBAL_EXTIPtr[EXTI5]!=STD_NULL)){
 800028c:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	095b      	lsrs	r3, r3, #5
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	2b01      	cmp	r3, #1
 8000298:	bf0c      	ite	eq
 800029a:	2301      	moveq	r3, #1
 800029c:	2300      	movne	r3, #0
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b49      	ldr	r3, [pc, #292]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	4013      	ands	r3, r2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d009      	beq.n	80002ca <EXTI9_5_IRQHandler+0x42>
			GLOBAL_EXTIPtr[EXTI5]();
 80002b6:	4b44      	ldr	r3, [pc, #272]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI5;
 80002bc:	4b41      	ldr	r3, [pc, #260]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a40      	ldr	r2, [pc, #256]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6153      	str	r3, [r2, #20]
		}
	else if((GET_BIT(EXTI->PR,EXTI9)==1)&(GLOBAL_EXTIPtr[EXTI9]!=STD_NULL)){
			GLOBAL_EXTIPtr[EXTI9]();
			EXTI->PR |= 1<<EXTI9;
		}
}
 80002c8:	e07a      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI6)==1)&(GLOBAL_EXTIPtr[EXTI6]!=STD_NULL)){
 80002ca:	4b3e      	ldr	r3, [pc, #248]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	099b      	lsrs	r3, r3, #6
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	bf0c      	ite	eq
 80002d8:	2301      	moveq	r3, #1
 80002da:	2300      	movne	r3, #0
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b3a      	ldr	r3, [pc, #232]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf14      	ite	ne
 80002e6:	2301      	movne	r3, #1
 80002e8:	2300      	moveq	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4013      	ands	r3, r2
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d009      	beq.n	8000308 <EXTI9_5_IRQHandler+0x80>
			GLOBAL_EXTIPtr[EXTI6]();
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI6;
 80002fa:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a31      	ldr	r2, [pc, #196]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000304:	6153      	str	r3, [r2, #20]
}
 8000306:	e05b      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI7)==1)&(GLOBAL_EXTIPtr[EXTI7]!=STD_NULL)){
 8000308:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	09db      	lsrs	r3, r3, #7
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	2b01      	cmp	r3, #1
 8000314:	bf0c      	ite	eq
 8000316:	2301      	moveq	r3, #1
 8000318:	2300      	movne	r3, #0
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 800031e:	69db      	ldr	r3, [r3, #28]
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf14      	ite	ne
 8000324:	2301      	movne	r3, #1
 8000326:	2300      	moveq	r3, #0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4013      	ands	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d009      	beq.n	8000346 <EXTI9_5_IRQHandler+0xbe>
			GLOBAL_EXTIPtr[EXTI7]();
 8000332:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI7;
 8000338:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a21      	ldr	r2, [pc, #132]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000342:	6153      	str	r3, [r2, #20]
}
 8000344:	e03c      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI8)==1)&(GLOBAL_EXTIPtr[EXTI8]!=STD_NULL)){
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	0a1b      	lsrs	r3, r3, #8
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	2b01      	cmp	r3, #1
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 800035c:	6a1b      	ldr	r3, [r3, #32]
 800035e:	2b00      	cmp	r3, #0
 8000360:	bf14      	ite	ne
 8000362:	2301      	movne	r3, #1
 8000364:	2300      	moveq	r3, #0
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4013      	ands	r3, r2
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d009      	beq.n	8000384 <EXTI9_5_IRQHandler+0xfc>
			GLOBAL_EXTIPtr[EXTI8]();
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI8;
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000380:	6153      	str	r3, [r2, #20]
}
 8000382:	e01d      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI9)==1)&(GLOBAL_EXTIPtr[EXTI9]!=STD_NULL)){
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	0a5b      	lsrs	r3, r3, #9
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	2b01      	cmp	r3, #1
 8000390:	bf0c      	ite	eq
 8000392:	2301      	moveq	r3, #1
 8000394:	2300      	movne	r3, #0
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 800039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039c:	2b00      	cmp	r3, #0
 800039e:	bf14      	ite	ne
 80003a0:	2301      	movne	r3, #1
 80003a2:	2300      	moveq	r3, #0
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	4013      	ands	r3, r2
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d008      	beq.n	80003c0 <EXTI9_5_IRQHandler+0x138>
			GLOBAL_EXTIPtr[EXTI9]();
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80003b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b2:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI9;
 80003b4:	4b03      	ldr	r3, [pc, #12]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a02      	ldr	r2, [pc, #8]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80003ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003be:	6153      	str	r3, [r2, #20]
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40013c00 	.word	0x40013c00
 80003c8:	2000001c 	.word	0x2000001c

080003cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	if((GET_BIT(EXTI->PR,EXTI10)==1)&(GLOBAL_EXTIPtr[EXTI10]!=STD_NULL)){
 80003d0:	4b5d      	ldr	r3, [pc, #372]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	0a9b      	lsrs	r3, r3, #10
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	2b01      	cmp	r3, #1
 80003dc:	bf0c      	ite	eq
 80003de:	2301      	moveq	r3, #1
 80003e0:	2300      	movne	r3, #0
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b59      	ldr	r3, [pc, #356]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80003e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	bf14      	ite	ne
 80003ec:	2301      	movne	r3, #1
 80003ee:	2300      	moveq	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	4013      	ands	r3, r2
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d009      	beq.n	800040e <EXTI15_10_IRQHandler+0x42>
			GLOBAL_EXTIPtr[EXTI10]();
 80003fa:	4b54      	ldr	r3, [pc, #336]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80003fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003fe:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI10;
 8000400:	4b51      	ldr	r3, [pc, #324]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a50      	ldr	r2, [pc, #320]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800040a:	6153      	str	r3, [r2, #20]
		}
	else if((GET_BIT(EXTI->PR,EXTI15)==1)&(GLOBAL_EXTIPtr[EXTI15]!=STD_NULL)){
		GLOBAL_EXTIPtr[EXTI15]();
		EXTI->PR |= 1<<EXTI15;
	}
}
 800040c:	e099      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI11)==1)&(GLOBAL_EXTIPtr[EXTI11]!=STD_NULL)){
 800040e:	4b4e      	ldr	r3, [pc, #312]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	0adb      	lsrs	r3, r3, #11
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b01      	cmp	r3, #1
 800041a:	bf0c      	ite	eq
 800041c:	2301      	moveq	r3, #1
 800041e:	2300      	movne	r3, #0
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b4a      	ldr	r3, [pc, #296]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf14      	ite	ne
 800042a:	2301      	movne	r3, #1
 800042c:	2300      	moveq	r3, #0
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4013      	ands	r3, r2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b00      	cmp	r3, #0
 8000436:	d009      	beq.n	800044c <EXTI15_10_IRQHandler+0x80>
			GLOBAL_EXTIPtr[EXTI11]();
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 800043a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043c:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI11;
 800043e:	4b42      	ldr	r3, [pc, #264]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a41      	ldr	r2, [pc, #260]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000448:	6153      	str	r3, [r2, #20]
}
 800044a:	e07a      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI12)==1)&(GLOBAL_EXTIPtr[EXTI12]!=STD_NULL)){
 800044c:	4b3e      	ldr	r3, [pc, #248]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	0b1b      	lsrs	r3, r3, #12
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	2b01      	cmp	r3, #1
 8000458:	bf0c      	ite	eq
 800045a:	2301      	moveq	r3, #1
 800045c:	2300      	movne	r3, #0
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b3a      	ldr	r3, [pc, #232]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	2b00      	cmp	r3, #0
 8000466:	bf14      	ite	ne
 8000468:	2301      	movne	r3, #1
 800046a:	2300      	moveq	r3, #0
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4013      	ands	r3, r2
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d009      	beq.n	800048a <EXTI15_10_IRQHandler+0xbe>
			GLOBAL_EXTIPtr[EXTI12]();
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI12;
 800047c:	4b32      	ldr	r3, [pc, #200]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a31      	ldr	r2, [pc, #196]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000486:	6153      	str	r3, [r2, #20]
}
 8000488:	e05b      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI13)==1)&(GLOBAL_EXTIPtr[EXTI13]!=STD_NULL)){
 800048a:	4b2f      	ldr	r3, [pc, #188]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	0b5b      	lsrs	r3, r3, #13
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	2b01      	cmp	r3, #1
 8000496:	bf0c      	ite	eq
 8000498:	2301      	moveq	r3, #1
 800049a:	2300      	movne	r3, #0
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d009      	beq.n	80004c8 <EXTI15_10_IRQHandler+0xfc>
			GLOBAL_EXTIPtr[EXTI13]();
 80004b4:	4b25      	ldr	r3, [pc, #148]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b8:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI13;
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a22      	ldr	r2, [pc, #136]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c4:	6153      	str	r3, [r2, #20]
}
 80004c6:	e03c      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI14)==1)&(GLOBAL_EXTIPtr[EXTI14]!=STD_NULL)){
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	0b9b      	lsrs	r3, r3, #14
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf14      	ite	ne
 80004e4:	2301      	movne	r3, #1
 80004e6:	2300      	moveq	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4013      	ands	r3, r2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d009      	beq.n	8000506 <EXTI15_10_IRQHandler+0x13a>
			GLOBAL_EXTIPtr[EXTI14]();
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f6:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI14;
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a12      	ldr	r2, [pc, #72]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000502:	6153      	str	r3, [r2, #20]
}
 8000504:	e01d      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI15)==1)&(GLOBAL_EXTIPtr[EXTI15]!=STD_NULL)){
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	0bdb      	lsrs	r3, r3, #15
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b01      	cmp	r3, #1
 8000512:	bf0c      	ite	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	2300      	movne	r3, #0
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 800051c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf14      	ite	ne
 8000522:	2301      	movne	r3, #1
 8000524:	2300      	moveq	r3, #0
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4013      	ands	r3, r2
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d008      	beq.n	8000542 <EXTI15_10_IRQHandler+0x176>
		GLOBAL_EXTIPtr[EXTI15]();
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000534:	4798      	blx	r3
		EXTI->PR |= 1<<EXTI15;
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a03      	ldr	r2, [pc, #12]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800053c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000540:	6153      	str	r3, [r2, #20]
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40013c00 	.word	0x40013c00
 800054c:	2000001c 	.word	0x2000001c

08000550 <MGPIO_vSetPinMode>:
#include"MGPIO_Config.h"
#include"MGPIO_Private.h"
#include"MGPIO_int.h"


void MGPIO_vSetPinMode( u8 Copy_u8PortID, u8 Copy_u8PinNo , u8 Copy_u8PinMode){
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	460b      	mov	r3, r1
 800055c:	71bb      	strb	r3, [r7, #6]
 800055e:	4613      	mov	r3, r2
 8000560:	717b      	strb	r3, [r7, #5]

	   switch(Copy_u8PortID){
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d01c      	beq.n	80005a2 <MGPIO_vSetPinMode+0x52>
 8000568:	2b02      	cmp	r3, #2
 800056a:	d032      	beq.n	80005d2 <MGPIO_vSetPinMode+0x82>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d000      	beq.n	8000572 <MGPIO_vSetPinMode+0x22>
	  		   GPIOC -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
	  		   /* set the desired mode*/
	  		   GPIOC -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
	  		   break;
	   }
}
 8000570:	e047      	b.n	8000602 <MGPIO_vSetPinMode+0xb2>
		   GPIOA -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 8000572:	4b27      	ldr	r3, [pc, #156]	; (8000610 <MGPIO_vSetPinMode+0xc0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	79ba      	ldrb	r2, [r7, #6]
 8000578:	0052      	lsls	r2, r2, #1
 800057a:	2103      	movs	r1, #3
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	43d2      	mvns	r2, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <MGPIO_vSetPinMode+0xc0>)
 8000586:	400b      	ands	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
		   GPIOA -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 800058a:	4b21      	ldr	r3, [pc, #132]	; (8000610 <MGPIO_vSetPinMode+0xc0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	7979      	ldrb	r1, [r7, #5]
 8000590:	79ba      	ldrb	r2, [r7, #6]
 8000592:	0052      	lsls	r2, r2, #1
 8000594:	fa01 f202 	lsl.w	r2, r1, r2
 8000598:	4611      	mov	r1, r2
 800059a:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <MGPIO_vSetPinMode+0xc0>)
 800059c:	430b      	orrs	r3, r1
 800059e:	6013      	str	r3, [r2, #0]
		   break;
 80005a0:	e02f      	b.n	8000602 <MGPIO_vSetPinMode+0xb2>
	  		   GPIOB -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	79ba      	ldrb	r2, [r7, #6]
 80005a8:	0052      	lsls	r2, r2, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 80005b6:	400b      	ands	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
	  		   GPIOB -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	7979      	ldrb	r1, [r7, #5]
 80005c0:	79ba      	ldrb	r2, [r7, #6]
 80005c2:	0052      	lsls	r2, r2, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
	  		   break;
 80005d0:	e017      	b.n	8000602 <MGPIO_vSetPinMode+0xb2>
	  		   GPIOC -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	79ba      	ldrb	r2, [r7, #6]
 80005d8:	0052      	lsls	r2, r2, #1
 80005da:	2103      	movs	r1, #3
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005e6:	400b      	ands	r3, r1
 80005e8:	6013      	str	r3, [r2, #0]
	  		   GPIOC -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	7979      	ldrb	r1, [r7, #5]
 80005f0:	79ba      	ldrb	r2, [r7, #6]
 80005f2:	0052      	lsls	r2, r2, #1
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	6013      	str	r3, [r2, #0]
	  		   break;
 8000600:	bf00      	nop
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40020000 	.word	0x40020000
 8000614:	40020400 	.word	0x40020400
 8000618:	40020800 	.word	0x40020800

0800061c <MGPIO_vSetPinOutPutType>:

void MGPIO_vSetPinOutPutType( u8 Copy_u8PortID, u8 Copy_u8PinNo , u8 Copy_u8PinOutPutType){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	460b      	mov	r3, r1
 8000628:	71bb      	strb	r3, [r7, #6]
 800062a:	4613      	mov	r3, r2
 800062c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d01e      	beq.n	8000672 <MGPIO_vSetPinOutPutType+0x56>
 8000634:	2b02      	cmp	r3, #2
 8000636:	d036      	beq.n	80006a6 <MGPIO_vSetPinOutPutType+0x8a>
 8000638:	2b00      	cmp	r3, #0
 800063a:	d000      	beq.n	800063e <MGPIO_vSetPinOutPutType+0x22>
			else
				CLR_BIT(GPIOC -> OTYPER , Copy_u8PinNo);
			break;

	}
}
 800063c:	e04d      	b.n	80006da <MGPIO_vSetPinOutPutType+0xbe>
		if(Copy_u8PinOutPutType == GPIO_OPEN_DRAIN)
 800063e:	797b      	ldrb	r3, [r7, #5]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10a      	bne.n	800065a <MGPIO_vSetPinOutPutType+0x3e>
			SET_BIT(GPIOA -> OTYPER , Copy_u8PinNo);
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MGPIO_vSetPinOutPutType+0xcc>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	79ba      	ldrb	r2, [r7, #6]
 800064a:	2101      	movs	r1, #1
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	4611      	mov	r1, r2
 8000652:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <MGPIO_vSetPinOutPutType+0xcc>)
 8000654:	430b      	orrs	r3, r1
 8000656:	6053      	str	r3, [r2, #4]
		break;
 8000658:	e03f      	b.n	80006da <MGPIO_vSetPinOutPutType+0xbe>
			CLR_BIT(GPIOA -> OTYPER , Copy_u8PinNo);
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MGPIO_vSetPinOutPutType+0xcc>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	79ba      	ldrb	r2, [r7, #6]
 8000660:	2101      	movs	r1, #1
 8000662:	fa01 f202 	lsl.w	r2, r1, r2
 8000666:	43d2      	mvns	r2, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <MGPIO_vSetPinOutPutType+0xcc>)
 800066c:	400b      	ands	r3, r1
 800066e:	6053      	str	r3, [r2, #4]
		break;
 8000670:	e033      	b.n	80006da <MGPIO_vSetPinOutPutType+0xbe>
			if(Copy_u8PinOutPutType == GPIO_OPEN_DRAIN)
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10a      	bne.n	800068e <MGPIO_vSetPinOutPutType+0x72>
				SET_BIT(GPIOB -> OTYPER , Copy_u8PinNo);
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MGPIO_vSetPinOutPutType+0xd0>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	4611      	mov	r1, r2
 8000686:	4a19      	ldr	r2, [pc, #100]	; (80006ec <MGPIO_vSetPinOutPutType+0xd0>)
 8000688:	430b      	orrs	r3, r1
 800068a:	6053      	str	r3, [r2, #4]
			break;
 800068c:	e025      	b.n	80006da <MGPIO_vSetPinOutPutType+0xbe>
				CLR_BIT(GPIOB -> OTYPER , Copy_u8PinNo);
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MGPIO_vSetPinOutPutType+0xd0>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	2101      	movs	r1, #1
 8000696:	fa01 f202 	lsl.w	r2, r1, r2
 800069a:	43d2      	mvns	r2, r2
 800069c:	4611      	mov	r1, r2
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MGPIO_vSetPinOutPutType+0xd0>)
 80006a0:	400b      	ands	r3, r1
 80006a2:	6053      	str	r3, [r2, #4]
			break;
 80006a4:	e019      	b.n	80006da <MGPIO_vSetPinOutPutType+0xbe>
			if(Copy_u8PinOutPutType == GPIO_OPEN_DRAIN)
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10a      	bne.n	80006c2 <MGPIO_vSetPinOutPutType+0xa6>
				SET_BIT(GPIOC -> OTYPER , Copy_u8PinNo);
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MGPIO_vSetPinOutPutType+0xd4>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	79ba      	ldrb	r2, [r7, #6]
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <MGPIO_vSetPinOutPutType+0xd4>)
 80006bc:	430b      	orrs	r3, r1
 80006be:	6053      	str	r3, [r2, #4]
			break;
 80006c0:	e00a      	b.n	80006d8 <MGPIO_vSetPinOutPutType+0xbc>
				CLR_BIT(GPIOC -> OTYPER , Copy_u8PinNo);
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MGPIO_vSetPinOutPutType+0xd4>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	79ba      	ldrb	r2, [r7, #6]
 80006c8:	2101      	movs	r1, #1
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	43d2      	mvns	r2, r2
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <MGPIO_vSetPinOutPutType+0xd4>)
 80006d4:	400b      	ands	r3, r1
 80006d6:	6053      	str	r3, [r2, #4]
			break;
 80006d8:	bf00      	nop
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020800 	.word	0x40020800

080006f4 <MGPIO_vSetPinOutPutSpeed>:

void MGPIO_vSetPinOutPutSpeed( u8 Copy_u8PortID, u8 Copy_u8PinNo , u8 Copy_u8PinOutPutSpeed){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	460b      	mov	r3, r1
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	4613      	mov	r3, r2
 8000704:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d01c      	beq.n	8000746 <MGPIO_vSetPinOutPutSpeed+0x52>
 800070c:	2b02      	cmp	r3, #2
 800070e:	d032      	beq.n	8000776 <MGPIO_vSetPinOutPutSpeed+0x82>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d000      	beq.n	8000716 <MGPIO_vSetPinOutPutSpeed+0x22>
		  		   GPIOC -> OSPEEDR &= ~(0b11<<(Copy_u8PinNo*2));
		  		   /* set the desired speed*/
		  		   GPIOC -> OSPEEDR |= (Copy_u8PinOutPutSpeed <<(Copy_u8PinNo*2));
		  		   break;
		   }
}
 8000714:	e047      	b.n	80007a6 <MGPIO_vSetPinOutPutSpeed+0xb2>
			   GPIOA -> OSPEEDR &= ~(0b11<<(Copy_u8PinNo*2));
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MGPIO_vSetPinOutPutSpeed+0xc0>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	2103      	movs	r1, #3
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	43d2      	mvns	r2, r2
 8000726:	4611      	mov	r1, r2
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <MGPIO_vSetPinOutPutSpeed+0xc0>)
 800072a:	400b      	ands	r3, r1
 800072c:	6093      	str	r3, [r2, #8]
			   GPIOA -> OSPEEDR |= (Copy_u8PinOutPutSpeed <<(Copy_u8PinNo*2));
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MGPIO_vSetPinOutPutSpeed+0xc0>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	7979      	ldrb	r1, [r7, #5]
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a1d      	ldr	r2, [pc, #116]	; (80007b4 <MGPIO_vSetPinOutPutSpeed+0xc0>)
 8000740:	430b      	orrs	r3, r1
 8000742:	6093      	str	r3, [r2, #8]
			   break;
 8000744:	e02f      	b.n	80007a6 <MGPIO_vSetPinOutPutSpeed+0xb2>
		  		   GPIOB -> OSPEEDR &= ~(0b11<<(Copy_u8PinNo*2));
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MGPIO_vSetPinOutPutSpeed+0xc4>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	2103      	movs	r1, #3
 8000750:	fa01 f202 	lsl.w	r2, r1, r2
 8000754:	43d2      	mvns	r2, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <MGPIO_vSetPinOutPutSpeed+0xc4>)
 800075a:	400b      	ands	r3, r1
 800075c:	6093      	str	r3, [r2, #8]
		  		   GPIOB -> OSPEEDR |= (Copy_u8PinOutPutSpeed <<(Copy_u8PinNo*2));
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MGPIO_vSetPinOutPutSpeed+0xc4>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	7979      	ldrb	r1, [r7, #5]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MGPIO_vSetPinOutPutSpeed+0xc4>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6093      	str	r3, [r2, #8]
		  		   break;
 8000774:	e017      	b.n	80007a6 <MGPIO_vSetPinOutPutSpeed+0xb2>
		  		   GPIOC -> OSPEEDR &= ~(0b11<<(Copy_u8PinNo*2));
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MGPIO_vSetPinOutPutSpeed+0xc8>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	79ba      	ldrb	r2, [r7, #6]
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	2103      	movs	r1, #3
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	43d2      	mvns	r2, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <MGPIO_vSetPinOutPutSpeed+0xc8>)
 800078a:	400b      	ands	r3, r1
 800078c:	6093      	str	r3, [r2, #8]
		  		   GPIOC -> OSPEEDR |= (Copy_u8PinOutPutSpeed <<(Copy_u8PinNo*2));
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MGPIO_vSetPinOutPutSpeed+0xc8>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	7979      	ldrb	r1, [r7, #5]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <MGPIO_vSetPinOutPutSpeed+0xc8>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6093      	str	r3, [r2, #8]
		  		   break;
 80007a4:	bf00      	nop
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020800 	.word	0x40020800

080007c0 <MGPIO_vSetPinInPutType>:

void MGPIO_vSetPinInPutType( u8 Copy_u8PortID, u8 Copy_u8PinNo , u8 Copy_u8PinInputType){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
 80007ca:	460b      	mov	r3, r1
 80007cc:	71bb      	strb	r3, [r7, #6]
 80007ce:	4613      	mov	r3, r2
 80007d0:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d01c      	beq.n	8000812 <MGPIO_vSetPinInPutType+0x52>
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d032      	beq.n	8000842 <MGPIO_vSetPinInPutType+0x82>
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d000      	beq.n	80007e2 <MGPIO_vSetPinInPutType+0x22>
			  		   GPIOC -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
			  		   /* set the desired pull */
			  		   GPIOC -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
			  		   break;
			   }
}
 80007e0:	e047      	b.n	8000872 <MGPIO_vSetPinInPutType+0xb2>
				   GPIOA -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MGPIO_vSetPinInPutType+0xc0>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	79ba      	ldrb	r2, [r7, #6]
 80007e8:	0052      	lsls	r2, r2, #1
 80007ea:	2103      	movs	r1, #3
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <MGPIO_vSetPinInPutType+0xc0>)
 80007f6:	400b      	ands	r3, r1
 80007f8:	60d3      	str	r3, [r2, #12]
				   GPIOA -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MGPIO_vSetPinInPutType+0xc0>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	7979      	ldrb	r1, [r7, #5]
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <MGPIO_vSetPinInPutType+0xc0>)
 800080c:	430b      	orrs	r3, r1
 800080e:	60d3      	str	r3, [r2, #12]
				   break;
 8000810:	e02f      	b.n	8000872 <MGPIO_vSetPinInPutType+0xb2>
			  		   GPIOB -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MGPIO_vSetPinInPutType+0xc4>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	0052      	lsls	r2, r2, #1
 800081a:	2103      	movs	r1, #3
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	43d2      	mvns	r2, r2
 8000822:	4611      	mov	r1, r2
 8000824:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MGPIO_vSetPinInPutType+0xc4>)
 8000826:	400b      	ands	r3, r1
 8000828:	60d3      	str	r3, [r2, #12]
			  		   GPIOB -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MGPIO_vSetPinInPutType+0xc4>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	7979      	ldrb	r1, [r7, #5]
 8000830:	79ba      	ldrb	r2, [r7, #6]
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MGPIO_vSetPinInPutType+0xc4>)
 800083c:	430b      	orrs	r3, r1
 800083e:	60d3      	str	r3, [r2, #12]
			  		   break;
 8000840:	e017      	b.n	8000872 <MGPIO_vSetPinInPutType+0xb2>
			  		   GPIOC -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MGPIO_vSetPinInPutType+0xc8>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	2103      	movs	r1, #3
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <MGPIO_vSetPinInPutType+0xc8>)
 8000856:	400b      	ands	r3, r1
 8000858:	60d3      	str	r3, [r2, #12]
			  		   GPIOC -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MGPIO_vSetPinInPutType+0xc8>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	7979      	ldrb	r1, [r7, #5]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a07      	ldr	r2, [pc, #28]	; (8000888 <MGPIO_vSetPinInPutType+0xc8>)
 800086c:	430b      	orrs	r3, r1
 800086e:	60d3      	str	r3, [r2, #12]
			  		   break;
 8000870:	bf00      	nop
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40020000 	.word	0x40020000
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800

0800088c <MGPIO_vSetPinValue>:
					break;
		}
		return Local_u8PinVal;
}

void MGPIO_vSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinNo ,u8 Copy_u8PinValue){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	460b      	mov	r3, r1
 8000898:	71bb      	strb	r3, [r7, #6]
 800089a:	4613      	mov	r3, r2
 800089c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d01e      	beq.n	80008e2 <MGPIO_vSetPinValue+0x56>
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d036      	beq.n	8000916 <MGPIO_vSetPinValue+0x8a>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d000      	beq.n	80008ae <MGPIO_vSetPinValue+0x22>
				else
					CLR_BIT(GPIOC -> ODR , Copy_u8PinNo);
				break;

		}
}
 80008ac:	e04d      	b.n	800094a <MGPIO_vSetPinValue+0xbe>
			if(Copy_u8PinValue == HIGH)
 80008ae:	797b      	ldrb	r3, [r7, #5]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10a      	bne.n	80008ca <MGPIO_vSetPinValue+0x3e>
				SET_BIT(GPIOA -> ODR , Copy_u8PinNo);
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MGPIO_vSetPinValue+0xcc>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	79ba      	ldrb	r2, [r7, #6]
 80008ba:	2101      	movs	r1, #1
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a25      	ldr	r2, [pc, #148]	; (8000958 <MGPIO_vSetPinValue+0xcc>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6153      	str	r3, [r2, #20]
			break;
 80008c8:	e03f      	b.n	800094a <MGPIO_vSetPinValue+0xbe>
				CLR_BIT(GPIOA -> ODR , Copy_u8PinNo);
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MGPIO_vSetPinValue+0xcc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	2101      	movs	r1, #1
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	43d2      	mvns	r2, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MGPIO_vSetPinValue+0xcc>)
 80008dc:	400b      	ands	r3, r1
 80008de:	6153      	str	r3, [r2, #20]
			break;
 80008e0:	e033      	b.n	800094a <MGPIO_vSetPinValue+0xbe>
				if(Copy_u8PinValue == HIGH)
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d10a      	bne.n	80008fe <MGPIO_vSetPinValue+0x72>
					SET_BIT(GPIOB -> ODR , Copy_u8PinNo);
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MGPIO_vSetPinValue+0xd0>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	79ba      	ldrb	r2, [r7, #6]
 80008ee:	2101      	movs	r1, #1
 80008f0:	fa01 f202 	lsl.w	r2, r1, r2
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a19      	ldr	r2, [pc, #100]	; (800095c <MGPIO_vSetPinValue+0xd0>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6153      	str	r3, [r2, #20]
				break;
 80008fc:	e025      	b.n	800094a <MGPIO_vSetPinValue+0xbe>
					CLR_BIT(GPIOB -> ODR , Copy_u8PinNo);
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MGPIO_vSetPinValue+0xd0>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	79ba      	ldrb	r2, [r7, #6]
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <MGPIO_vSetPinValue+0xd0>)
 8000910:	400b      	ands	r3, r1
 8000912:	6153      	str	r3, [r2, #20]
				break;
 8000914:	e019      	b.n	800094a <MGPIO_vSetPinValue+0xbe>
				if(Copy_u8PinValue == HIGH)
 8000916:	797b      	ldrb	r3, [r7, #5]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10a      	bne.n	8000932 <MGPIO_vSetPinValue+0xa6>
					SET_BIT(GPIOC -> ODR , Copy_u8PinNo);
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MGPIO_vSetPinValue+0xd4>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	79ba      	ldrb	r2, [r7, #6]
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f202 	lsl.w	r2, r1, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <MGPIO_vSetPinValue+0xd4>)
 800092c:	430b      	orrs	r3, r1
 800092e:	6153      	str	r3, [r2, #20]
				break;
 8000930:	e00a      	b.n	8000948 <MGPIO_vSetPinValue+0xbc>
					CLR_BIT(GPIOC -> ODR , Copy_u8PinNo);
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MGPIO_vSetPinValue+0xd4>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	2101      	movs	r1, #1
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	43d2      	mvns	r2, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a07      	ldr	r2, [pc, #28]	; (8000960 <MGPIO_vSetPinValue+0xd4>)
 8000944:	400b      	ands	r3, r1
 8000946:	6153      	str	r3, [r2, #20]
				break;
 8000948:	bf00      	nop
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40020000 	.word	0x40020000
 800095c:	40020400 	.word	0x40020400
 8000960:	40020800 	.word	0x40020800

08000964 <MGPIO_vSetAlternativeFunction>:
					break;

			}
}

void MGPIO_vSetAlternativeFunction(u8 Copy_u8PortID, u8 Copy_u8PinNo ,u8 Copy_u8FunctionName){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	460b      	mov	r3, r1
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	4613      	mov	r3, r2
 8000974:	717b      	strb	r3, [r7, #5]


	switch(Copy_u8PortID){
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d03a      	beq.n	80009f2 <MGPIO_vSetAlternativeFunction+0x8e>
 800097c:	2b02      	cmp	r3, #2
 800097e:	d06e      	beq.n	8000a5e <MGPIO_vSetAlternativeFunction+0xfa>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d000      	beq.n	8000986 <MGPIO_vSetAlternativeFunction+0x22>

	}



}
 8000984:	e0a1      	b.n	8000aca <MGPIO_vSetAlternativeFunction+0x166>
		if(Copy_u8PinNo <=7 ){
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d817      	bhi.n	80009bc <MGPIO_vSetAlternativeFunction+0x58>
			GPIOA -> AFRL &= ~(0b1111 << (Copy_u8PinNo*4) );
 800098c:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	79ba      	ldrb	r2, [r7, #6]
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	210f      	movs	r1, #15
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	43d2      	mvns	r2, r2
 800099c:	4611      	mov	r1, r2
 800099e:	4a4e      	ldr	r2, [pc, #312]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 80009a0:	400b      	ands	r3, r1
 80009a2:	6213      	str	r3, [r2, #32]
			GPIOA -> AFRL |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 80009a4:	4b4c      	ldr	r3, [pc, #304]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 80009a6:	6a1b      	ldr	r3, [r3, #32]
 80009a8:	7979      	ldrb	r1, [r7, #5]
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a48      	ldr	r2, [pc, #288]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6213      	str	r3, [r2, #32]
		break;
 80009ba:	e086      	b.n	8000aca <MGPIO_vSetAlternativeFunction+0x166>
			Copy_u8PinNo-=8;
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	3b08      	subs	r3, #8
 80009c0:	71bb      	strb	r3, [r7, #6]
			GPIOA -> AFRH &= ~(0b1111 << (Copy_u8PinNo*4) );
 80009c2:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	79ba      	ldrb	r2, [r7, #6]
 80009c8:	0092      	lsls	r2, r2, #2
 80009ca:	210f      	movs	r1, #15
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	4611      	mov	r1, r2
 80009d4:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 80009d6:	400b      	ands	r3, r1
 80009d8:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOA -> AFRH |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 80009da:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 80009dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009de:	7979      	ldrb	r1, [r7, #5]
 80009e0:	79ba      	ldrb	r2, [r7, #6]
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	4611      	mov	r1, r2
 80009ea:	4a3b      	ldr	r2, [pc, #236]	; (8000ad8 <MGPIO_vSetAlternativeFunction+0x174>)
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 80009f0:	e06b      	b.n	8000aca <MGPIO_vSetAlternativeFunction+0x166>
			if(Copy_u8PinNo <=7 ){
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	2b07      	cmp	r3, #7
 80009f6:	d817      	bhi.n	8000a28 <MGPIO_vSetAlternativeFunction+0xc4>
				GPIOB -> AFRL &= ~(0b1111 << (Copy_u8PinNo*4) );
 80009f8:	4b38      	ldr	r3, [pc, #224]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 80009fa:	6a1b      	ldr	r3, [r3, #32]
 80009fc:	79ba      	ldrb	r2, [r7, #6]
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	210f      	movs	r1, #15
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	43d2      	mvns	r2, r2
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4a34      	ldr	r2, [pc, #208]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	6213      	str	r3, [r2, #32]
				GPIOB -> AFRL |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8000a10:	4b32      	ldr	r3, [pc, #200]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	7979      	ldrb	r1, [r7, #5]
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4a2e      	ldr	r2, [pc, #184]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 8000a22:	430b      	orrs	r3, r1
 8000a24:	6213      	str	r3, [r2, #32]
			break;
 8000a26:	e050      	b.n	8000aca <MGPIO_vSetAlternativeFunction+0x166>
				Copy_u8PinNo-=8;
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	3b08      	subs	r3, #8
 8000a2c:	71bb      	strb	r3, [r7, #6]
				GPIOB -> AFRH &= ~(0b1111 << (Copy_u8PinNo*4) );
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	210f      	movs	r1, #15
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a26      	ldr	r2, [pc, #152]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 8000a42:	400b      	ands	r3, r1
 8000a44:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOB -> AFRH |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	7979      	ldrb	r1, [r7, #5]
 8000a4c:	79ba      	ldrb	r2, [r7, #6]
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	fa01 f202 	lsl.w	r2, r1, r2
 8000a54:	4611      	mov	r1, r2
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <MGPIO_vSetAlternativeFunction+0x178>)
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8000a5c:	e035      	b.n	8000aca <MGPIO_vSetAlternativeFunction+0x166>
			if(Copy_u8PinNo <=7 ){
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	2b07      	cmp	r3, #7
 8000a62:	d817      	bhi.n	8000a94 <MGPIO_vSetAlternativeFunction+0x130>
				GPIOC -> AFRL &= ~(0b1111 << (Copy_u8PinNo*4) );
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	79ba      	ldrb	r2, [r7, #6]
 8000a6a:	0092      	lsls	r2, r2, #2
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	43d2      	mvns	r2, r2
 8000a74:	4611      	mov	r1, r2
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000a78:	400b      	ands	r3, r1
 8000a7a:	6213      	str	r3, [r2, #32]
				GPIOC -> AFRL |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	7979      	ldrb	r1, [r7, #5]
 8000a82:	79ba      	ldrb	r2, [r7, #6]
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	6213      	str	r3, [r2, #32]
			break;
 8000a92:	e019      	b.n	8000ac8 <MGPIO_vSetAlternativeFunction+0x164>
				Copy_u8PinNo-=8;
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	3b08      	subs	r3, #8
 8000a98:	71bb      	strb	r3, [r7, #6]
				GPIOC -> AFRH &= ~(0b1111 << (Copy_u8PinNo*4) );
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	79ba      	ldrb	r2, [r7, #6]
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000aae:	400b      	ands	r3, r1
 8000ab0:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOC -> AFRH |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab6:	7979      	ldrb	r1, [r7, #5]
 8000ab8:	79ba      	ldrb	r2, [r7, #6]
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8000ac8:	bf00      	nop
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <MNVIC_vEnableInterrupt>:
static MNVIC_Priority_GP Global_u8GPMode  ;

/***************************************************************************/
/*                        Functions Implementations                        */
/***************************************************************************/
void MNVIC_vEnableInterrupt(Enum_MNVIC_NUM_t Copy_u8InterruptNo){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]

	/* note : writing 0 to any bit has no effect so we can u atomic instruction like BSSR */
	SET_BIT_FAST( NVIC->ISER[ (Copy_u8InterruptNo/32) ] , (Copy_u8InterruptNo % 32)  );
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	2201      	movs	r2, #1
 8000af6:	fa02 f103 	lsl.w	r1, r2, r3
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <MNVIC_vEnableInterrupt+0x30>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <MNVIC_vClearPendingFlag>:

	/* note : writing 0 to any bit has no effect so we can u atomic instruction like BSSR */
	SET_BIT_FAST( NVIC->ISPR[ (Copy_u8InterruptNo/32) ] , (Copy_u8InterruptNo % 32)  );
}

void MNVIC_vClearPendingFlag (Enum_MNVIC_NUM_t Copy_u8InterruptNo){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]

			/* note : writing 0 to any bit has no effect so we can u atomic instruction like BSSR */
			SET_BIT_FAST( NVIC->ICPR[ (Copy_u8InterruptNo/32) ] , (Copy_u8InterruptNo % 32)  );
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 031f 	and.w	r3, r3, #31
 8000b28:	2201      	movs	r2, #1
 8000b2a:	fa02 f103 	lsl.w	r1, r2, r3
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <MNVIC_vClearPendingFlag+0x30>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3360      	adds	r3, #96	; 0x60
 8000b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <MRCC_vInit>:
#include"MRCC_Int.h"

/***************************************************************************/
/*                        Functions Implementations                        */
/***************************************************************************/
void MRCC_vInit(void){
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	  CLR_SET(RCC->CFGR,SW0);
	  //Wait until HSE is used as system clock source
	  while( GET_2BITS(RCC->CFGR,SWS0) != SWS_HSE );
#elif RCC_SYS_CLK == RCC_HSI
	  //Enable Selected Clock
	  SET_BIT(RCC->CR,HSION);
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MRCC_vInit+0x48>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <MRCC_vInit+0x48>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
	  // Wait Until HSI is ready "Clock is working properly"
	  while( !GET_BIT(RCC->CR,HSIRDY) );
 8000b5c:	bf00      	nop
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MRCC_vInit+0x48>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f8      	beq.n	8000b5e <MRCC_vInit+0x12>
	  //Select System Clock
	  CLR_2BITS(RCC->CFGR,SW0);
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MRCC_vInit+0x48>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <MRCC_vInit+0x48>)
 8000b72:	f023 0303 	bic.w	r3, r3, #3
 8000b76:	6093      	str	r3, [r2, #8]
	  //Wait until HSI is used as system clock source
	  while( GET_2BITS(RCC->CFGR,SWS0) != SWS_HSI );
 8000b78:	bf00      	nop
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MRCC_vInit+0x48>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f8      	bne.n	8000b7a <MRCC_vInit+0x2e>
		  SET_BIT(RCC->CR,PLLON);
		  // Wait Until PLL is ready "Clock is working properly"
		  while( !GET_BIT(RCC->CR,PLLRDY) );
#endif

}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <MRCC_vEnableClock>:

void MRCC_vEnableClock(PeripheralEnable_t Copy_u8PeripheralNo){
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8PeripheralNo >= 96){
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ba6:	d90d      	bls.n	8000bc4 <MRCC_vEnableClock+0x2c>
		Copy_u8PeripheralNo -= 96;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3b60      	subs	r3, #96	; 0x60
 8000bac:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralNo);
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
		Copy_u8PeripheralNo -= 32;
		SET_BIT(RCC->AHB2ENR,Copy_u8PeripheralNo);
	}
	else{
		SET_BIT(RCC->AHB1ENR,Copy_u8PeripheralNo);}
}
 8000bc2:	e02b      	b.n	8000c1c <MRCC_vEnableClock+0x84>
	else if(Copy_u8PeripheralNo >= 64){
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc8:	d90d      	bls.n	8000be6 <MRCC_vEnableClock+0x4e>
		Copy_u8PeripheralNo -= 64;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	3b40      	subs	r3, #64	; 0x40
 8000bce:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralNo);
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be4:	e01a      	b.n	8000c1c <MRCC_vEnableClock+0x84>
	else if(Copy_u8PeripheralNo >= 32){
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b1f      	cmp	r3, #31
 8000bea:	d90d      	bls.n	8000c08 <MRCC_vEnableClock+0x70>
		Copy_u8PeripheralNo -= 32;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3b20      	subs	r3, #32
 8000bf0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB2ENR,Copy_u8PeripheralNo);
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000c02:	430b      	orrs	r3, r1
 8000c04:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000c06:	e009      	b.n	8000c1c <MRCC_vEnableClock+0x84>
		SET_BIT(RCC->AHB1ENR,Copy_u8PeripheralNo);}
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	79fa      	ldrb	r2, [r7, #7]
 8000c0e:	2101      	movs	r1, #1
 8000c10:	fa01 f202 	lsl.w	r2, r1, r2
 8000c14:	4611      	mov	r1, r2
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <MRCC_vEnableClock+0x90>)
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40023800 	.word	0x40023800

08000c2c <SPI1_IRQHandler>:
		u8 Local_u8ReceivedData = SPIx->DR;
		return Local_u8ReceivedData;

}

void SPI1_IRQHandler(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[0]!=STD_NULL)
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <SPI1_IRQHandler+0x40>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	085b      	lsrs	r3, r3, #1
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <SPI1_IRQHandler+0x20>
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <SPI1_IRQHandler+0x44>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <SPI1_IRQHandler+0x20>
		SPIx_pvTxcallback[0]();
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <SPI1_IRQHandler+0x44>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4798      	blx	r3


	if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[0]!=STD_NULL)
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <SPI1_IRQHandler+0x40>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <SPI1_IRQHandler+0x3a>
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SPI1_IRQHandler+0x48>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <SPI1_IRQHandler+0x3a>
		SPIx_pvRXcallback[0]();
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SPI1_IRQHandler+0x48>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4798      	blx	r3
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	2000005c 	.word	0x2000005c
 8000c74:	2000006c 	.word	0x2000006c

08000c78 <SPI2_IRQHandler>:

void SPI2_IRQHandler(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[1]!=STD_NULL)
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <SPI2_IRQHandler+0x40>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d006      	beq.n	8000c98 <SPI2_IRQHandler+0x20>
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <SPI2_IRQHandler+0x44>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <SPI2_IRQHandler+0x20>
			SPIx_pvTxcallback[1]();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <SPI2_IRQHandler+0x44>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	4798      	blx	r3


		if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[1]!=STD_NULL)
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <SPI2_IRQHandler+0x40>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <SPI2_IRQHandler+0x3a>
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SPI2_IRQHandler+0x48>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <SPI2_IRQHandler+0x3a>
			SPIx_pvRXcallback[1]();
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SPI2_IRQHandler+0x48>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4798      	blx	r3

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	2000005c 	.word	0x2000005c
 8000cc0:	2000006c 	.word	0x2000006c

08000cc4 <SPI3_IRQHandler>:

void SPI3_IRQHandler(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[2]!=STD_NULL)
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <SPI3_IRQHandler+0x40>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	085b      	lsrs	r3, r3, #1
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <SPI3_IRQHandler+0x20>
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <SPI3_IRQHandler+0x44>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <SPI3_IRQHandler+0x20>
			SPIx_pvTxcallback[2]();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <SPI3_IRQHandler+0x44>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	4798      	blx	r3


		if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[2]!=STD_NULL)
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <SPI3_IRQHandler+0x40>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <SPI3_IRQHandler+0x3a>
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SPI3_IRQHandler+0x48>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <SPI3_IRQHandler+0x3a>
			SPIx_pvRXcallback[2]();
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SPI3_IRQHandler+0x48>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	4798      	blx	r3

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40013000 	.word	0x40013000
 8000d08:	2000005c 	.word	0x2000005c
 8000d0c:	2000006c 	.word	0x2000006c

08000d10 <SPI4_IRQHandler>:

void SPI4_IRQHandler(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[3]!=STD_NULL)
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <SPI4_IRQHandler+0x40>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <SPI4_IRQHandler+0x20>
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <SPI4_IRQHandler+0x44>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <SPI4_IRQHandler+0x20>
			SPIx_pvTxcallback[3]();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <SPI4_IRQHandler+0x44>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	4798      	blx	r3


		if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[3]!=STD_NULL)
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <SPI4_IRQHandler+0x40>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <SPI4_IRQHandler+0x3a>
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SPI4_IRQHandler+0x48>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <SPI4_IRQHandler+0x3a>
			SPIx_pvRXcallback[3]();
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SPI4_IRQHandler+0x48>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	4798      	blx	r3

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40013000 	.word	0x40013000
 8000d54:	2000005c 	.word	0x2000005c
 8000d58:	2000006c 	.word	0x2000006c

08000d5c <SysTick_Handler>:
/**
 * @brief SysTick Timer Interrupt Handler.
 * @note  Calls the callback function if it has been set.
 * @return void
 */
void SysTick_Handler(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    // Check if a callback function is set and call it
    if (GLOBAL_SYSTICK_CallBack != STD_NULL) {
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Handler+0x18>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <SysTick_Handler+0x12>
        GLOBAL_SYSTICK_CallBack();
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <SysTick_Handler+0x18>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4798      	blx	r3
    }
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000007c 	.word	0x2000007c

08000d78 <LOC_GET_TIMER>:
 * @param 		 Copy_u8TimerNum: The TIMER number to retrieve the memory-mapped structure.
 *                          Expected to be a value from {1 to 8, 9 to 11} representing different Timers.
 * @return 		 TIM2_5_MemMap_t*: Pointer to the memory-mapped structure of the specified TIMER.
 * @note 		 using TIM2_5_MemMap_t struct to be used for all timers
 */
TIM2_5_MemMap_t* LOC_GET_TIMER(u32 Copy_u8TimerNum) {
 8000d78:	b4b0      	push	{r4, r5, r7}
 8000d7a:	b08d      	sub	sp, #52	; 0x34
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    // Array containing the offsets of TIMER registers for different TIMers.
    u32 Timer_Offset[8] = TIMERS_OFFSET;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <LOC_GET_TIMER+0x40>)
 8000d82:	f107 040c 	add.w	r4, r7, #12
 8000d86:	461d      	mov	r5, r3
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate the base address of the specified TIMER using its offset.
    TIM2_5_MemMap_t* TIMx = (TIM2_5_MemMap_t*)((u32)TIM2 + Timer_Offset[Copy_u8TimerNum - 1]);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d9e:	4413      	add	r3, r2
 8000da0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Return the pointer to the memory-mapped structure of the specified TIMER.
    return TIMx;
 8000daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3734      	adds	r7, #52	; 0x34
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bcb0      	pop	{r4, r5, r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	080015a8 	.word	0x080015a8

08000dbc <LOC_TIMER_ICU>:
 * @note   This function captures the time difference between rising and falling edges
 *         on Timer 1, Channel 4. It uses the capture/compare registers and sets the
 *         timer to capture the rising edge first, then the falling edge.
 * @return None
 */
void LOC_TIMER_ICU(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8ChannelNum) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	static u8 captureState[29] = {0};
	static u32 captureValue1[29] = {0};
	static u32 captureValue2[29] = {0};
	TIM2_5_MemMap_t* TIMx = LOC_GET_TIMER(Copy_u8TimerNum+1);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ffd1 	bl	8000d78 <LOC_GET_TIMER>
 8000dd6:	60f8      	str	r0, [r7, #12]
	if (captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] == 0) {
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	009a      	lsls	r2, r3, #2
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <LOC_TIMER_ICU+0xe0>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d11f      	bne.n	8000e28 <LOC_TIMER_ICU+0x6c>
		// Capture the time on the rising edge
		captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = TIMx->CCR[Copy_u8ChannelNum];
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	79fa      	ldrb	r2, [r7, #7]
 8000dec:	0091      	lsls	r1, r2, #2
 8000dee:	79ba      	ldrb	r2, [r7, #6]
 8000df0:	440a      	add	r2, r1
 8000df2:	68f9      	ldr	r1, [r7, #12]
 8000df4:	330c      	adds	r3, #12
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <LOC_TIMER_ICU+0xe4>)
 8000dfe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

		// Enable falling edge capture
		SET_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	79ba      	ldrb	r2, [r7, #6]
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	3201      	adds	r2, #1
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	431a      	orrs	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	621a      	str	r2, [r3, #32]

		// Move to the next state
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 1;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	009a      	lsls	r2, r3, #2
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <LOC_TIMER_ICU+0xe0>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	54d1      	strb	r1, [r2, r3]
		Time[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] - captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)];

		// Reset state value
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 0;
	}
}
 8000e26:	e035      	b.n	8000e94 <LOC_TIMER_ICU+0xd8>
		captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = TIMx->CCR[Copy_u8ChannelNum];
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	0091      	lsls	r1, r2, #2
 8000e2e:	79ba      	ldrb	r2, [r7, #6]
 8000e30:	440a      	add	r2, r1
 8000e32:	68f9      	ldr	r1, [r7, #12]
 8000e34:	330c      	adds	r3, #12
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4919      	ldr	r1, [pc, #100]	; (8000ea4 <LOC_TIMER_ICU+0xe8>)
 8000e3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		CLR_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	79ba      	ldrb	r2, [r7, #6]
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	621a      	str	r2, [r3, #32]
		Time[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] - captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)];
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	009a      	lsls	r2, r3, #2
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <LOC_TIMER_ICU+0xe8>)
 8000e64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	009a      	lsls	r2, r3, #2
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LOC_TIMER_ICU+0xe4>)
 8000e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	0098      	lsls	r0, r3, #2
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	4403      	add	r3, r0
 8000e7e:	1a8a      	subs	r2, r1, r2
 8000e80:	4909      	ldr	r1, [pc, #36]	; (8000ea8 <LOC_TIMER_ICU+0xec>)
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 0;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <LOC_TIMER_ICU+0xe0>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	54d1      	strb	r1, [r2, r3]
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000114 	.word	0x20000114
 8000ea0:	20000134 	.word	0x20000134
 8000ea4:	200001a8 	.word	0x200001a8
 8000ea8:	200000a0 	.word	0x200000a0

08000eac <TIM1_UP_TIM10_IRQHandler>:
/**
 * @brief   Interrupt handler for TIM1 and TIM10 interrupts.
 *
 * @note    This function is called when either TIM1 or TIM10 triggers an interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	// Check if the update interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 0)) {
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00d      	beq.n	8000ed8 <TIM1_UP_TIM10_IRQHandler+0x2c>

		// Check if a callback function is registered for TIM1
		if (GLOBAL_Ptr[0] != STD_NULL) {
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <TIM1_UP_TIM10_IRQHandler+0x1e>
			// Call the callback function for TIM1
			GLOBAL_Ptr[0]();
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4798      	blx	r3
		}

		// Clear the update interrupt flag of TIM1
		CLR_BIT(TIM1->SR, 0);
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM10 without calling a callback function
				CLR_BIT(TIM10->SR, 0);
			}
		}
	}
}
 8000ed6:	e02a      	b.n	8000f2e <TIM1_UP_TIM10_IRQHandler+0x82>
		if (GET_BIT(TIM10->SR, 1)) {
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	085b      	lsrs	r3, r3, #1
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d009      	beq.n	8000efa <TIM1_UP_TIM10_IRQHandler+0x4e>
			LOC_TIMER_ICU(TIMER10 - 1, CH1 - 1);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2006      	movs	r0, #6
 8000eea:	f7ff ff67 	bl	8000dbc <LOC_TIMER_ICU>
			CLR_BIT(TIM10->SR, CH1);
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000ef4:	f023 0302 	bic.w	r3, r3, #2
 8000ef8:	6113      	str	r3, [r2, #16]
		if (GET_BIT(TIM10->SR, 0)) {
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d013      	beq.n	8000f2e <TIM1_UP_TIM10_IRQHandler+0x82>
			if (GLOBAL_Ptr[6] != STD_NULL) {
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d009      	beq.n	8000f22 <TIM1_UP_TIM10_IRQHandler+0x76>
				GLOBAL_Ptr[6]();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4798      	blx	r3
				CLR_BIT(TIM10->SR, 0);
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000f1a:	f023 0301 	bic.w	r3, r3, #1
 8000f1e:	6113      	str	r3, [r2, #16]
}
 8000f20:	e005      	b.n	8000f2e <TIM1_UP_TIM10_IRQHandler+0x82>
				CLR_BIT(TIM10->SR, 0);
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x90>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6113      	str	r3, [r2, #16]
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40010000 	.word	0x40010000
 8000f38:	20000080 	.word	0x20000080
 8000f3c:	40014400 	.word	0x40014400

08000f40 <TIM1_TRG_COM_TIM11_IRQHandler>:
/**
 * @brief   Interrupt handler for TIM1 trigger/completion and TIM11 interrupts.
 *
 * @note    This function is called when either TIM1 triggers a trigger/completion or TIM11 triggers an interrupt.
 */
void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

	// Check if the trigger interrupt or COM interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 5) || GET_BIT(TIM1->SR, 6)) {
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <TIM1_TRG_COM_TIM11_IRQHandler+0x7c>)
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	095b      	lsrs	r3, r3, #5
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d131      	bne.n	8000fb6 <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <TIM1_TRG_COM_TIM11_IRQHandler+0x7c>)
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	099b      	lsrs	r3, r3, #6
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d12a      	bne.n	8000fb6 <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
		// Handle TIMER1 trigger or COM interrupt
		// Add the necessary code or call a function for TIMER1 trigger or COM handling
	}
	else {
		// Check if the capture/compare interrupt flag for CH1 of TIM11 is set
		if (GET_BIT(TIM11->SR, 1)) {
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	085b      	lsrs	r3, r3, #1
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d009      	beq.n	8000f82 <TIM1_TRG_COM_TIM11_IRQHandler+0x42>

			// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM11
			LOC_TIMER_ICU(TIMER11 - 1, CH1 - 1);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2007      	movs	r0, #7
 8000f72:	f7ff ff23 	bl	8000dbc <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH1 of TIM11
			CLR_BIT(TIM11->SR, CH1);
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000f7c:	f023 0302 	bic.w	r3, r3, #2
 8000f80:	6113      	str	r3, [r2, #16]
		}
		// Check if the update interrupt flag of TIM11 is set
		if (GET_BIT(TIM11->SR, 0)) {
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d013      	beq.n	8000fb6 <TIM1_TRG_COM_TIM11_IRQHandler+0x76>

			// Check if a callback function is registered for TIM11 (at index 7 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[7] != STD_NULL) {
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d009      	beq.n	8000faa <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>

				// Call the callback function for TIM11
				GLOBAL_Ptr[7]();
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <TIM1_TRG_COM_TIM11_IRQHandler+0x84>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4798      	blx	r3

				// Clear the update interrupt flag of TIM11
				CLR_BIT(TIM11->SR, 0);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM11 without calling a callback function
				CLR_BIT(TIM11->SR, 0);
			}
		}
	}
}
 8000fa8:	e005      	b.n	8000fb6 <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
				CLR_BIT(TIM11->SR, 0);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x80>)
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	6113      	str	r3, [r2, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	40014800 	.word	0x40014800
 8000fc4:	20000080 	.word	0x20000080

08000fc8 <TIM1_BRK_TIM9_IRQHandler>:
/**
 * @brief   Interrupt handler for TIM1 break and TIM9 interrupts.
 *
 * @note    This function is called when either TIM1 triggers a break interrupt or TIM9 triggers an interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	// Check if the break interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 7)) {
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	09db      	lsrs	r3, r3, #7
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d13c      	bne.n	8001054 <TIM1_BRK_TIM9_IRQHandler+0x8c>
		// Add the necessary code or call a function for TIMER1 break handling
	}
	else {

		// Check if the capture/compare interrupt flag for CH1 of TIM9 is set
		if (GET_BIT(TIM9->SR, 1)) {
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00a      	beq.n	8000ffe <TIM1_BRK_TIM9_IRQHandler+0x36>

			// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM9
			LOC_TIMER_ICU(TIMER9 - 1, CH1 - 1);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2005      	movs	r0, #5
 8000fec:	f7ff fee6 	bl	8000dbc <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH1 of TIM9
			CLR_BIT(TIM9->SR, CH1);
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	6113      	str	r3, [r2, #16]
 8000ffc:	e010      	b.n	8001020 <TIM1_BRK_TIM9_IRQHandler+0x58>
		}
		else if (GET_BIT(TIM9->SR, 2)) {
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d009      	beq.n	8001020 <TIM1_BRK_TIM9_IRQHandler+0x58>
			// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM9
			LOC_TIMER_ICU(TIMER9 - 1, CH2 - 1);
 800100c:	2101      	movs	r1, #1
 800100e:	2005      	movs	r0, #5
 8001010:	f7ff fed4 	bl	8000dbc <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH2 of TIM9
			CLR_BIT(TIM9->SR, CH2);
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 800101a:	f023 0304 	bic.w	r3, r3, #4
 800101e:	6113      	str	r3, [r2, #16]
		}
		// Check if the update interrupt flag of TIM9 is set
		if (GET_BIT(TIM9->SR, 0)) {
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <TIM1_BRK_TIM9_IRQHandler+0x8c>

			// Check if a callback function is registered for TIM9 (at index 5 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[5] != STD_NULL) {
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <TIM1_BRK_TIM9_IRQHandler+0x80>

				// Call the callback function for TIM9
				GLOBAL_Ptr[5]();
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	4798      	blx	r3

				// Clear the update interrupt flag of TIM9
				CLR_BIT(TIM9->SR, 0);
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM9 without calling a callback function
				CLR_BIT(TIM9->SR, 0);
			}
		}
	}
}
 8001046:	e005      	b.n	8001054 <TIM1_BRK_TIM9_IRQHandler+0x8c>
				CLR_BIT(TIM9->SR, 0);
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	6113      	str	r3, [r2, #16]
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40010000 	.word	0x40010000
 800105c:	40014000 	.word	0x40014000
 8001060:	20000080 	.word	0x20000080

08001064 <TIM1_CC_IRQHandler>:
 * @brief   Interrupt handler for TIM1 capture/compare interrupts.
 *
 * @note    This function is called when any of the capture/compare channels (CH1-CH4)
 * 				 of TIM1 triggers an interrupt.
 */
void TIM1_CC_IRQHandler(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM1 is set
	if (GET_BIT(TIM1->SR, 1)) {
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	085b      	lsrs	r3, r3, #1
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00a      	beq.n	800108c <TIM1_CC_IRQHandler+0x28>

		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM1
		LOC_TIMER_ICU(TIMER1 - 1, CH1 - 1);
 8001076:	2100      	movs	r1, #0
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fe9f 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM1
		CLR_BIT(TIM1->SR, CH1);
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 8001084:	f023 0302 	bic.w	r3, r3, #2
 8001088:	6113      	str	r3, [r2, #16]
		LOC_TIMER_ICU(TIMER1 - 1, CH4 - 1);

		// Clear the capture/compare interrupt flag for CH4 of TIM1
		CLR_BIT(TIM1->SR, CH4);
	}
}
 800108a:	e02d      	b.n	80010e8 <TIM1_CC_IRQHandler+0x84>
	else if (GET_BIT(TIM1->SR, 2)) {
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00a      	beq.n	80010b0 <TIM1_CC_IRQHandler+0x4c>
		LOC_TIMER_ICU(TIMER1 - 1, CH2 - 1);
 800109a:	2101      	movs	r1, #1
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fe8d 	bl	8000dbc <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH2);
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	6113      	str	r3, [r2, #16]
}
 80010ae:	e01b      	b.n	80010e8 <TIM1_CC_IRQHandler+0x84>
	else if (GET_BIT(TIM1->SR, 3)) {
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <TIM1_CC_IRQHandler+0x70>
		LOC_TIMER_ICU(TIMER1 - 1, CH3 - 1);
 80010be:	2102      	movs	r1, #2
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fe7b 	bl	8000dbc <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH3);
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 80010cc:	f023 0308 	bic.w	r3, r3, #8
 80010d0:	6113      	str	r3, [r2, #16]
}
 80010d2:	e009      	b.n	80010e8 <TIM1_CC_IRQHandler+0x84>
		LOC_TIMER_ICU(TIMER1 - 1, CH4 - 1);
 80010d4:	2103      	movs	r1, #3
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fe70 	bl	8000dbc <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH4);
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	4a02      	ldr	r2, [pc, #8]	; (80010ec <TIM1_CC_IRQHandler+0x88>)
 80010e2:	f023 0310 	bic.w	r3, r3, #16
 80010e6:	6113      	str	r3, [r2, #16]
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010000 	.word	0x40010000

080010f0 <TIM2_IRQHandler>:
 * @brief   Interrupt handler for TIM2 capture/compare and update interrupts.
 *
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 				the update interrupt of TIM2 triggers an interrupt.
 */
void TIM2_IRQHandler(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM2 is set
	if (GET_BIT(TIM2->SR, 1)) {
 80010f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00c      	beq.n	800111e <TIM2_IRQHandler+0x2e>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH1 - 1);
 8001104:	2100      	movs	r1, #0
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fe58 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM2
		CLR_BIT(TIM2->SR, CH1);
 800110c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001116:	f023 0302 	bic.w	r3, r3, #2
 800111a:	6113      	str	r3, [r2, #16]
 800111c:	e03d      	b.n	800119a <TIM2_IRQHandler+0xaa>
	}
	else if (GET_BIT(TIM2->SR, 2)) {
 800111e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00c      	beq.n	8001148 <TIM2_IRQHandler+0x58>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH2 - 1);
 800112e:	2101      	movs	r1, #1
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fe43 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM2
		CLR_BIT(TIM2->SR, CH2);
 8001136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001140:	f023 0304 	bic.w	r3, r3, #4
 8001144:	6113      	str	r3, [r2, #16]
 8001146:	e028      	b.n	800119a <TIM2_IRQHandler+0xaa>
	}
	else if (GET_BIT(TIM2->SR, 3)) {
 8001148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <TIM2_IRQHandler+0x82>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH3 - 1);
 8001158:	2102      	movs	r1, #2
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fe2e 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM2
		CLR_BIT(TIM2->SR, CH3);
 8001160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116a:	f023 0308 	bic.w	r3, r3, #8
 800116e:	6113      	str	r3, [r2, #16]
 8001170:	e013      	b.n	800119a <TIM2_IRQHandler+0xaa>
	}
	else if (GET_BIT(TIM2->SR, 4)) {
 8001172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <TIM2_IRQHandler+0xaa>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH4 - 1);
 8001182:	2103      	movs	r1, #3
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff fe19 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM2
		CLR_BIT(TIM2->SR, CH4);
 800118a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001194:	f023 0310 	bic.w	r3, r3, #16
 8001198:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM2 is set
	if (GET_BIT(TIM2->SR, 0)) {
 800119a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d017      	beq.n	80011d8 <TIM2_IRQHandler+0xe8>
		// Check if a callback function is registered for TIM2 (at index 2 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[1] != STD_NULL) {
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <TIM2_IRQHandler+0xec>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00b      	beq.n	80011c8 <TIM2_IRQHandler+0xd8>

			// Call the callback function for TIM2
			GLOBAL_Ptr[1]();
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <TIM2_IRQHandler+0xec>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4798      	blx	r3

			// Clear the update interrupt flag of TIM2
			CLR_BIT(TIM2->SR, 0);
 80011b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM2 without calling a callback function
			CLR_BIT(TIM2->SR, 0);
		}
	}
}
 80011c6:	e007      	b.n	80011d8 <TIM2_IRQHandler+0xe8>
			CLR_BIT(TIM2->SR, 0);
 80011c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	6113      	str	r3, [r2, #16]
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000080 	.word	0x20000080

080011e0 <TIM3_IRQHandler>:
 * @brief   Interrupt handler for TIM3 capture/compare and update interrupts.
 *
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 			 the update interrupt of TIM3 triggers an interrupt.
 */
void TIM3_IRQHandler(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM3 is set
	if (GET_BIT(TIM3->SR, 1)) {
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <TIM3_IRQHandler+0xcc>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	085b      	lsrs	r3, r3, #1
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00a      	beq.n	8001208 <TIM3_IRQHandler+0x28>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH1 - 1);
 80011f2:	2100      	movs	r1, #0
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff fde1 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM3
		CLR_BIT(TIM3->SR, CH1);
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <TIM3_IRQHandler+0xcc>)
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001200:	f023 0302 	bic.w	r3, r3, #2
 8001204:	6113      	str	r3, [r2, #16]
 8001206:	e034      	b.n	8001272 <TIM3_IRQHandler+0x92>
	}
	else if (GET_BIT(TIM3->SR, 2)) {
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <TIM3_IRQHandler+0xcc>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <TIM3_IRQHandler+0x4c>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH2 - 1);
 8001216:	2101      	movs	r1, #1
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fdcf 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM3
		CLR_BIT(TIM3->SR, CH2);
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6113      	str	r3, [r2, #16]
 800122a:	e022      	b.n	8001272 <TIM3_IRQHandler+0x92>
	}
	else if (GET_BIT(TIM3->SR, 3)) {
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <TIM3_IRQHandler+0xcc>)
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <TIM3_IRQHandler+0x70>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH3 - 1);
 800123a:	2102      	movs	r1, #2
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff fdbd 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM3
		CLR_BIT(TIM3->SR, CH3);
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001248:	f023 0308 	bic.w	r3, r3, #8
 800124c:	6113      	str	r3, [r2, #16]
 800124e:	e010      	b.n	8001272 <TIM3_IRQHandler+0x92>
	}
	else if (GET_BIT(TIM3->SR, 4)) {
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <TIM3_IRQHandler+0x92>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH4 - 1);
 800125e:	2103      	movs	r1, #3
 8001260:	2002      	movs	r0, #2
 8001262:	f7ff fdab 	bl	8000dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM3
		CLR_BIT(TIM3->SR, CH4);
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <TIM3_IRQHandler+0xcc>)
 800126c:	f023 0310 	bic.w	r3, r3, #16
 8001270:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM3 is set
	if (GET_BIT(TIM3->SR, 0)) {
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d013      	beq.n	80012a6 <TIM3_IRQHandler+0xc6>
		// Check if a callback function is registered for TIM3 (at index 3 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[2] != STD_NULL) {
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <TIM3_IRQHandler+0xd0>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <TIM3_IRQHandler+0xba>

			// Call the callback function for TIM3
			GLOBAL_Ptr[2]();
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <TIM3_IRQHandler+0xd0>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4798      	blx	r3

			// Clear the update interrupt flag of TIM3
			CLR_BIT(TIM3->SR, 0);
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <TIM3_IRQHandler+0xcc>)
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <TIM3_IRQHandler+0xcc>)
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM3 without calling a callback function
			CLR_BIT(TIM3->SR, 0);
		}
	}
}
 8001298:	e005      	b.n	80012a6 <TIM3_IRQHandler+0xc6>
			CLR_BIT(TIM3->SR, 0);
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <TIM3_IRQHandler+0xcc>)
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	4a03      	ldr	r2, [pc, #12]	; (80012ac <TIM3_IRQHandler+0xcc>)
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6113      	str	r3, [r2, #16]
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40000400 	.word	0x40000400
 80012b0:	20000080 	.word	0x20000080

080012b4 <MUART_Enable>:
/***************************************************************************/
static void(*UARTx_pvRXcallback[3])(void)={STD_NULL};


void MUART_Enable(u8 UART_Index)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	USART_REG UARTx = Get_UART(UART_Index);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f851 	bl	8001368 <Get_UART>
 80012c6:	60f8      	str	r0, [r7, #12]
	/*Enable Uart */

	/*Select BaudRate -> 9600*/
	UARTx ->BRR = 0x683; //clock 16
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f240 6283 	movw	r2, #1667	; 0x683
 80012ce:	609a      	str	r2, [r3, #8]
//	UARTx ->BRR = 0x341; //clock 8

	/* Select Stop Bits As 1-BIT */
	UARTx -> CR2.STOP |= (USART1_ONE_STOP_BITS << 12);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	f3c3 3301 	ubfx	r3, r3, #12, #2
 80012d8:	b2d9      	uxtb	r1, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	6913      	ldr	r3, [r2, #16]
 80012de:	f361 330d 	bfi	r3, r1, #12, #2
 80012e2:	6113      	str	r3, [r2, #16]

	/* ENABLE RX */
	UARTx ->CR1.RE = 1;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	68d3      	ldr	r3, [r2, #12]
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	60d3      	str	r3, [r2, #12]
	UARTx ->CR1.RXNEIE=1;
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	68d3      	ldr	r3, [r2, #12]
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	60d3      	str	r3, [r2, #12]


	/* ENABLE TX */
	UARTx ->CR1.TE = 1;
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	68d3      	ldr	r3, [r2, #12]
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	60d3      	str	r3, [r2, #12]

	/* Select No Sending BREAK */
	UARTx ->CR1.SBK = 0 ;
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	68d3      	ldr	r3, [r2, #12]
 8001306:	f36f 0300 	bfc	r3, #0, #1
 800130a:	60d3      	str	r3, [r2, #12]

	/* Select Disable Parity */
	UARTx ->CR1.PCE = 0;
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	68d3      	ldr	r3, [r2, #12]
 8001310:	f36f 238a 	bfc	r3, #10, #1
 8001314:	60d3      	str	r3, [r2, #12]

	/* SELECT WORD LENGHT AS 8DATA-BITS */
	UARTx ->CR1.M = _8DATA_LENGTH_ ;
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	68d3      	ldr	r3, [r2, #12]
 800131a:	f36f 330c 	bfc	r3, #12, #1
 800131e:	60d3      	str	r3, [r2, #12]

	/*SELECT OVER SAMPLING BY 16*/
	UARTx ->CR1.OVER8 = 0;
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	68d3      	ldr	r3, [r2, #12]
 8001324:	f36f 33cf 	bfc	r3, #15, #1
 8001328:	60d3      	str	r3, [r2, #12]
    MNVIC_vEnableInterrupt(NVIC_USART1);
 800132a:	2025      	movs	r0, #37	; 0x25
 800132c:	f7ff fbda 	bl	8000ae4 <MNVIC_vEnableInterrupt>

	UARTx ->CR1.UE = 1 ;
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	68d3      	ldr	r3, [r2, #12]
 8001334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001338:	60d3      	str	r3, [r2, #12]

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <MUART_Receive_Data>:
	return (u8)data;
}


u8 MUART_Receive_Data(u8 UART_Index)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
	u8 data ;
	USART_REG UARTx = Get_UART(UART_Index);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f80a 	bl	8001368 <Get_UART>
 8001354:	60f8      	str	r0, [r7, #12]
	data = (UARTx ->DR);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	72fb      	strb	r3, [r7, #11]
	return (u8)data;
 800135c:	7afb      	ldrb	r3, [r7, #11]
	
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <Get_UART>:

USART_REG Get_UART(u8 UART_Index){
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	USART_REG UARTx ;
	switch(UART_Index)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d006      	beq.n	8001386 <Get_UART+0x1e>
 8001378:	2b06      	cmp	r3, #6
 800137a:	d007      	beq.n	800138c <Get_UART+0x24>
 800137c:	2b01      	cmp	r3, #1
 800137e:	d108      	bne.n	8001392 <Get_UART+0x2a>
	{
	case 1: UARTx = USART1_REG ; break;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <Get_UART+0x38>)
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e005      	b.n	8001392 <Get_UART+0x2a>
	case 2: UARTx = USART2_REG ; break;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <Get_UART+0x3c>)
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e002      	b.n	8001392 <Get_UART+0x2a>
	case 6: UARTx = USART6_REG ; break;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <Get_UART+0x40>)
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	bf00      	nop
	}
	return UARTx;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40011400 	.word	0x40011400

080013ac <MUART_vSetRxCallBackFunc>:
void MUART_vSetRxCallBackFunc(u8 Local_u8UARTNo,void(*Local_pvRxIRQ)(void)){
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
	UARTx_pvRXcallback[Local_u8UARTNo]=Local_pvRxIRQ;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4905      	ldr	r1, [pc, #20]	; (80013d0 <MUART_vSetRxCallBackFunc+0x24>)
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	2000021c 	.word	0x2000021c

080013d4 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	//if( GET_BIT(USART1_REG->SR,5) && UARTx_pvRXcallback[0]!=STD_NULL)
	UARTx_pvRXcallback[0]();
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <USART1_IRQHandler+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4798      	blx	r3
	MNVIC_vClearPendingFlag(NVIC_USART1);
 80013de:	2025      	movs	r0, #37	; 0x25
 80013e0:	f7ff fb9a 	bl	8000b18 <MNVIC_vClearPendingFlag>


}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000021c 	.word	0x2000021c

080013ec <Toka_callback>:
#include"MCAL/MUART/MUSART_Interface.h"
#include"MCAL/MUART/MUSART_Config.h"
#include"MCAL/MUART/MUSART_Private.h"
//#include"APP/Inc/Path_Tracking.h"
void Toka_callback()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	u8 data_rx ;
	data_rx = MUART_Receive_Data(UART1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff ffa5 	bl	8001342 <MUART_Receive_Data>
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
	if (data_rx == 'f'){
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b66      	cmp	r3, #102	; 0x66
 8001400:	d105      	bne.n	800140e <Toka_callback+0x22>
		MGPIO_vSetPinValue(PORTC, PIN13, LOW);
 8001402:	2200      	movs	r2, #0
 8001404:	210d      	movs	r1, #13
 8001406:	2002      	movs	r0, #2
 8001408:	f7ff fa40 	bl	800088c <MGPIO_vSetPinValue>
		MGPIO_vSetPinValue(PORTC, PIN15, HIGH);
	}
	else{
		u8 Angle = data_rx - 40 ;
	}
}
 800140c:	e014      	b.n	8001438 <Toka_callback+0x4c>
	else if (data_rx == 'b'){
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b62      	cmp	r3, #98	; 0x62
 8001412:	d105      	bne.n	8001420 <Toka_callback+0x34>
		MGPIO_vSetPinValue(PORTC, PIN14, HIGH);
 8001414:	2201      	movs	r2, #1
 8001416:	210e      	movs	r1, #14
 8001418:	2002      	movs	r0, #2
 800141a:	f7ff fa37 	bl	800088c <MGPIO_vSetPinValue>
}
 800141e:	e00b      	b.n	8001438 <Toka_callback+0x4c>
	else if (data_rx == 'r'){
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b72      	cmp	r3, #114	; 0x72
 8001424:	d105      	bne.n	8001432 <Toka_callback+0x46>
		MGPIO_vSetPinValue(PORTC, PIN15, HIGH);
 8001426:	2201      	movs	r2, #1
 8001428:	210f      	movs	r1, #15
 800142a:	2002      	movs	r0, #2
 800142c:	f7ff fa2e 	bl	800088c <MGPIO_vSetPinValue>
}
 8001430:	e002      	b.n	8001438 <Toka_callback+0x4c>
		u8 Angle = data_rx - 40 ;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3b28      	subs	r3, #40	; 0x28
 8001436:	71bb      	strb	r3, [r7, #6]
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <main>:
int main (void){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

	MRCC_vInit();
 8001444:	f7ff fb82 	bl	8000b4c <MRCC_vInit>
	MRCC_vEnableClock(GPIOA_EN);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fba5 	bl	8000b98 <MRCC_vEnableClock>
	MRCC_vEnableClock(GPIOB_EN);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff fba2 	bl	8000b98 <MRCC_vEnableClock>
	MRCC_vEnableClock(GPIOC_EN);
 8001454:	2002      	movs	r0, #2
 8001456:	f7ff fb9f 	bl	8000b98 <MRCC_vEnableClock>
	MRCC_vEnableClock(SYSCFG_EN);
 800145a:	206e      	movs	r0, #110	; 0x6e
 800145c:	f7ff fb9c 	bl	8000b98 <MRCC_vEnableClock>
	MRCC_vEnableClock(USART1_EN);
 8001460:	2064      	movs	r0, #100	; 0x64
 8001462:	f7ff fb99 	bl	8000b98 <MRCC_vEnableClock>

	//********************************************************
	//UART1
	MGPIO_vSetPinMode(PORTA, PIN9 , ALTFUNC);
 8001466:	2202      	movs	r2, #2
 8001468:	2109      	movs	r1, #9
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff f870 	bl	8000550 <MGPIO_vSetPinMode>
	MGPIO_vSetAlternativeFunction(PORTA, PIN9, AF7);// Tx
 8001470:	2207      	movs	r2, #7
 8001472:	2109      	movs	r1, #9
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fa75 	bl	8000964 <MGPIO_vSetAlternativeFunction>
	MGPIO_vSetPinOutPutType(PORTA, PIN9,GPIO_PUSH_PULL);
 800147a:	2200      	movs	r2, #0
 800147c:	2109      	movs	r1, #9
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff f8cc 	bl	800061c <MGPIO_vSetPinOutPutType>
	MGPIO_vSetPinOutPutSpeed(PORTA, PIN9,MGPIO_SPEED_MEDIUM);
 8001484:	2201      	movs	r2, #1
 8001486:	2109      	movs	r1, #9
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff f933 	bl	80006f4 <MGPIO_vSetPinOutPutSpeed>
	MGPIO_vSetPinInPutType(PORTA, PIN9,PULLUP);
 800148e:	2201      	movs	r2, #1
 8001490:	2109      	movs	r1, #9
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff f994 	bl	80007c0 <MGPIO_vSetPinInPutType>

	MGPIO_vSetPinMode(PORTA, PIN10 , ALTFUNC);
 8001498:	2202      	movs	r2, #2
 800149a:	210a      	movs	r1, #10
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff f857 	bl	8000550 <MGPIO_vSetPinMode>
	MGPIO_vSetPinInPutType(PORTA, PIN10,PULLUP);
 80014a2:	2201      	movs	r2, #1
 80014a4:	210a      	movs	r1, #10
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff f98a 	bl	80007c0 <MGPIO_vSetPinInPutType>
	MGPIO_vSetAlternativeFunction(PORTA, PIN10, AF7); //Rx
 80014ac:	2207      	movs	r2, #7
 80014ae:	210a      	movs	r1, #10
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fa57 	bl	8000964 <MGPIO_vSetAlternativeFunction>

	MGPIO_vSetPinMode(PORTC, PIN13, OUTPUT);
 80014b6:	2201      	movs	r2, #1
 80014b8:	210d      	movs	r1, #13
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff f848 	bl	8000550 <MGPIO_vSetPinMode>
	MGPIO_vSetPinValue(PORTC, PIN13, HIGH);
 80014c0:	2201      	movs	r2, #1
 80014c2:	210d      	movs	r1, #13
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7ff f9e1 	bl	800088c <MGPIO_vSetPinValue>
	MGPIO_vSetPinMode(PORTC, PIN14, OUTPUT);
 80014ca:	2201      	movs	r2, #1
 80014cc:	210e      	movs	r1, #14
 80014ce:	2002      	movs	r0, #2
 80014d0:	f7ff f83e 	bl	8000550 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(PORTC, PIN15, OUTPUT);
 80014d4:	2201      	movs	r2, #1
 80014d6:	210f      	movs	r1, #15
 80014d8:	2002      	movs	r0, #2
 80014da:	f7ff f839 	bl	8000550 <MGPIO_vSetPinMode>

	//**************UART*********************
	//	u8 arr_tx[20] = {1,2,3,4,5,6,7,8};
	//	u8 arr_rx[8] ;
	//	u8* data = "1" ;
	MUART_vSetRxCallBackFunc(MUART1,Toka_callback);
 80014de:	4904      	ldr	r1, [pc, #16]	; (80014f0 <main+0xb0>)
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff ff63 	bl	80013ac <MUART_vSetRxCallBackFunc>
	MUART_Enable(UART1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fee4 	bl	80012b4 <MUART_Enable>
			MGPIO_vSetPinValue(PORTC, PIN13, LOW);
			MGPIO_vSetPinMode(PORTC, PIN14, OUTPUT);
			MGPIO_vSetPinValue(PORTC, PIN14, HIGH);
		}*/

	while(1){
 80014ec:	e7fe      	b.n	80014ec <main+0xac>
 80014ee:	bf00      	nop
 80014f0:	080013ed 	.word	0x080013ed

080014f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001522:	f000 f811 	bl	8001548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff ff8b 	bl	8001440 <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001538:	080015d0 	.word	0x080015d0
  ldr r2, =_sbss
 800153c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001540:	20000228 	.word	0x20000228

08001544 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <__libc_init_array>:
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	4e0d      	ldr	r6, [pc, #52]	; (8001580 <__libc_init_array+0x38>)
 800154c:	4c0d      	ldr	r4, [pc, #52]	; (8001584 <__libc_init_array+0x3c>)
 800154e:	1ba4      	subs	r4, r4, r6
 8001550:	10a4      	asrs	r4, r4, #2
 8001552:	2500      	movs	r5, #0
 8001554:	42a5      	cmp	r5, r4
 8001556:	d109      	bne.n	800156c <__libc_init_array+0x24>
 8001558:	4e0b      	ldr	r6, [pc, #44]	; (8001588 <__libc_init_array+0x40>)
 800155a:	4c0c      	ldr	r4, [pc, #48]	; (800158c <__libc_init_array+0x44>)
 800155c:	f000 f818 	bl	8001590 <_init>
 8001560:	1ba4      	subs	r4, r4, r6
 8001562:	10a4      	asrs	r4, r4, #2
 8001564:	2500      	movs	r5, #0
 8001566:	42a5      	cmp	r5, r4
 8001568:	d105      	bne.n	8001576 <__libc_init_array+0x2e>
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001570:	4798      	blx	r3
 8001572:	3501      	adds	r5, #1
 8001574:	e7ee      	b.n	8001554 <__libc_init_array+0xc>
 8001576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800157a:	4798      	blx	r3
 800157c:	3501      	adds	r5, #1
 800157e:	e7f2      	b.n	8001566 <__libc_init_array+0x1e>
 8001580:	080015c8 	.word	0x080015c8
 8001584:	080015c8 	.word	0x080015c8
 8001588:	080015c8 	.word	0x080015c8
 800158c:	080015cc 	.word	0x080015cc

08001590 <_init>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	bf00      	nop
 8001594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001596:	bc08      	pop	{r3}
 8001598:	469e      	mov	lr, r3
 800159a:	4770      	bx	lr

0800159c <_fini>:
 800159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159e:	bf00      	nop
 80015a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a2:	bc08      	pop	{r3}
 80015a4:	469e      	mov	lr, r3
 80015a6:	4770      	bx	lr
